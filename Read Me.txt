Pseudocode Calculator :
1.	Start 
-	Show arithmetic problem type options to users:
o	Addition
o	Subtraction
o	Multiplication
o	Distribution
o	Random mix
-	Request input from the user to select the problem type 
2.	Initialization Statistics
-	correct_exercises = 0
-	incorrect_exercises = 0
-	total_exercises = 0
3.	Build Main Loop functions (as long as continue is yes)
a.	Create Questions
b.	Display Questions
c.	Check Answers
d.	Show Feedback
e.	Update Statistics
f.	Show Statistics and Ask If The User Want to Continue
g.	Check User Options
4.	End 

Pseudocode String :
1.	Start 
o	Start the program by asking the user to enter a string.
2.	String Conversion
o	Convert input string to lowercase.
o	Remove all spaces and punctuation from the string.
3.	Summarize Letters in Strings
o	Create a function to summarize letters in a string.
o	This function will accept a string as input.
o	Calculate the frequency of each letter in the string.
o	Return the result as a list of tuples containing unique letters and their frequencies.
4.	Check the Complete Alphabet
o	Check whether the processed string has all the letters from 'a' to 'z'.
	If yes, display a message that the string contains all the letters of the alphabet.
	Otherwise, display a message that the string does not contain all letters of the alphabet.
5.	Present Descriptive Statistics and Graphics
o	Create a function to provide descriptive statistics from string data.
o	This function will accept a list of letter frequency tuples as input.
o	Count the total number of letters.
o	Show frequency of each letter.
o	Create a bar graph showing the frequency of each letter using Matplotlib.
6.	Sort Letters and Remove Duplication
o	Create a function to sort letters alphabetically.
o	This function will accept a processed string as input.
o	Sort letters in a string and remove duplicates.
o	Show sorting results.
o	Create another function to sort letters by their frequency of occurrence.
o	This function will accept a list of letter frequency tuples as input.
o	Sort letters by frequency from most frequently appearing to least frequently.
o	Show sorting results.
7.	Generating Anagrams
o	Create a function to generate anagrams from strings.
o	This function will accept a processed string as input.
o	Use permutations to generate all possible letter combinations.
o	Return the result as a set of anagrams.
8.	Run the Main Program
o	Create the main function to run the entire program.
o	Call functions to request user input.
o	Call a function to encapsulate letters in a string.
o	Call functions to display descriptive statistics and graphs.
o	Call the function to sort letters and remove duplication.
o	Call a function to generate anagrams from strings.
o	Show all the results obtained from the functions.
9.	End 
o	The program ends after all steps have been completed

Pseudocode Survey :
1.	Start 
2.	User Enters Rating
o	Users can enter 20 ratings one by one.
o	Ratings only range from 1 to 5 (1 = ‘awful’, 5 = ‘excellent’).
3.	Collect Survey Data
o	Collect survey data by asking users to enter their ratings.
o	Save user-entered ratings in a list.
4.	Calculating Frequencies and Statistics
o	Define ratings from 1 to 5 and their frequency.
o	Use the 'statistics' and 'numpy' libraries to calculate descriptive statistics from the entered ratings.
5.	Display Bar Graph
o	Use the 'matplotlib' library to display a bar graph based on the calculated frequency ratings.
6.	End 

Pseudocode Game 1 :
1.	Start 
2.	Display an Introductory Message
3.	Game Introduction
4.	Initialize the Game
o	Show greetings to users.
o	Generate random numbers that will be guessed by the user.
o	Set the number of attempts (attempts) to 0.
5.	Define the Number Guess Function
o	Define the guess_the_number() function which will manage the logic of the number guessing game.
6.	Request User Input
o	Ask users to enter their guesses. (guess_the_number())
7.	Increase the Number of Trials
o	Add 1 to the number of attempts every time the user enters a guess.
8.	Evaluate Guesses
o	If the guess is correct, display a message that the guess is correct and exit the loop.
o	If the guess is wrong, tell the user whether their guess was too high or too low.
o	Repeat asking the user for input until they guess correctly.
9.	Call the Guess Number Function
o	In the game initialization, call the guess_the_number() function to start the game.
10.	End 
o	The program ends once the user guesses the number correctly.

Pseudocode Game 2 :
1.	Start 
2.	Welcome players with the message "Welcome to Rock, Paper, Scissors!".
3.	Prepare a selection list consisting of 'rock', 'paper', and 'scissors'.
4.	Ask players to choose one of 'rock', 'paper', or 'scissors'.
5.	Change player selections to lowercase for uniformity.
6.	Randomly select a computer option from the selection list.
7.	Display the options selected by the computer.
o	If the player's choice is the same as the computer's choice, display the message "It's a tie!".
o	If the player's choice beats the computer's choice, display the message "CONGRATULATIONS!!! YOU WIN!!! :)".
o	If the computer's choice beats the player's choice, display the message "Sorry! You lost! :(".
8.	End
